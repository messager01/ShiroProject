<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itlike.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.itlike.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />

   <association property="department" javaType="com.itlike.domain.Department" columnPrefix="d_">
     <result property="id" column="id"/>
     <result property="name" column="name"/>
   </association>

  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <!--打破与角色之间关系-->
  <delete id="deleteRoleRel">
      delete  from employee_role_rel where eid=#{id}
  </delete>
  <!--添加员工-->
  <insert id="insert" parameterType="com.itlike.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (
    id,
    username,
    password,
    inputtime,
    tel,
    email,
    state,
    admin,
    dep_id)
    values (#{id}, #{username},#{password}, #{inputtime},
      #{tel}, #{email}, #{state}, #{admin},
      #{department.id})
  </insert>
  <!--保存员工和角色 关系-->
  <insert id="insertEmployeeAndRoleRel">
    insert into employee_role_rel(eid,rid) values (#{id},#{rid})
  </insert>

  <!--employeeMapper-->
  <update id="updateByPrimaryKey" parameterType="com.itlike.domain.Employee" >
    update employee
    set username = #{username},
      inputtime = #{inputtime},
      tel = #{tel},
      email = #{email},
      admin = #{admin},
      dep_id = #{department.id}
    where id = #{id}
  </update>
    <!--设置员工离职状态-->
  <update id="updateState">

    update employee set state=false where id=#{id}

  </update>


  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, inputtime, tel, email, state, admin, dep_id
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>

  <sql id="where_sql">
    <where>
       <if test="keyword !=null and keyword !=''">
          and e.username like concat('%',#{keyword},'%')
          or e.tel like concat('%',#{keyword},'%')
          or e.email like concat('%',#{keyword},'%')
       </if>
    </where>
  </sql>

  <!--员工关联部门查询-->
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    e.id,
    e.username,
    e.inputtime,
    e.tel,
    e.email,
    e.state,
    e.admin,
    d.id as d_id,
    d.`name` as d_name
    from employee as e
    LEFT JOIN department as d
    ON e.dep_id = d.id
    <include refid="where_sql"/>
    order by e.id
  </select>

  <!--  根据用户名查询用户-->
    <select id="getEmployeeWithUsername" resultType="com.itlike.domain.Employee">
      select * from employee where username = #{username}
    </select>

  <!--  根据id查询角色 -->
  <select id="getRolesById" resultType="java.lang.String">
    select r.rnum from employee_role_rel as er, role as r, employee as e
    where e.id = er.eid and er.rid = r.rid and e.id=#{id}

  </select>

  <!-- 根据 id  查询权限  -->
  <select id="getPermissionById" resultType="java.lang.String">
    SELECT distinct p.presource from permission as p WHERE pid in
    (
      SELECT rp.pid from employee_role_rel as er,role_permission_rel as rp
      where er.rid = rp.rid and er.eid = #{id}
    )

  </select>
    <select id="getAllEmployee" resultType="com.itlike.domain.Employee">
      select * from employee;
    </select>
</mapper>